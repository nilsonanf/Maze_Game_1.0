#include"libs.h"

float px, py /*player position*/, pdx, pdy, pa /*delta x, delta y and angle of the player*/ , front_dis;//distance btw player's front side and walls
int lvl = 0, fmes = 0;
void drawPlayer()
{
	glColor3f(1, 1, 0);
	glPointSize(8);
	glBegin(GL_POINTS);
	glVertex2i(px, py);
	glEnd();

	glLineWidth(3);
	glBegin(GL_LINES);
	glVertex2i(px, py);
	glVertex2i(px + pdx * 5, py + pdy * 5);
	glEnd();
}

int mapXw = 32, mapYw = 32, mapSw = 16; //mapX- number of elements on X axis, mapY- number of elements on Y axis, mapS-elements size (in this case the map is 512x512)
int mapWall[] =
{
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,
	1,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,0,1,0,0,1,0,0,1,1,0,1,
	1,0,1,0,1,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,1,0,1,0,0,1,0,0,1,0,0,1,
	1,0,1,1,1,0,1,0,1,1,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,0,0,1,0,0,1,
	1,0,0,1,1,0,1,0,1,0,0,0,0,0,0,1,1,0,1,0,1,0,1,0,0,1,0,0,1,1,0,1,
	1,0,1,1,0,0,1,0,1,0,1,1,1,1,0,1,0,0,1,0,1,0,1,0,1,1,0,0,0,1,0,1,
	1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,1,0,0,0,0,1,0,1,0,1,0,1,
	1,1,1,1,1,1,1,1,0,0,1,1,0,1,0,1,1,0,0,0,1,0,1,0,0,1,0,1,0,1,0,1,
	1,0,0,0,0,0,0,0,0,0,1,1,0,1,0,1,1,0,1,1,1,0,1,0,1,1,0,1,1,1,0,1,
	1,0,1,1,1,0,1,1,1,1,1,0,0,1,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,
	1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,
	1,0,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,
	1,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,0,0,1,1,0,1,0,0,0,1,0,1,
	1,0,1,0,1,0,1,0,1,0,1,0,1,1,0,0,0,0,1,1,0,1,1,1,0,1,0,1,0,1,0,1,
	1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,1,0,1,0,1,0,1,1,1,0,1,
	1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,1,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,0,1,0,1,1,1,1,1,1,1,0,1,
	1,0,1,1,1,1,1,1,1,0,1,0,1,1,0,0,1,0,0,1,0,1,0,1,0,0,0,1,0,1,0,1,
	1,0,1,0,0,0,0,0,0,0,1,0,0,1,0,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
	1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,1,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,1,
	1,0,1,1,1,0,1,0,1,1,1,0,1,1,0,1,1,0,1,1,0,1,0,1,0,1,0,1,0,0,0,1,
	1,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
	1,1,1,1,1,1,1,0,1,0,0,1,1,1,0,1,1,1,0,1,0,1,0,1,0,1,1,1,0,1,0,1,
	1,1,1,1,1,1,1,0,1,0,1,1,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1,
	1,0,0,0,0,0,1,0,1,0,1,0,0,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,
	1,0,1,0,1,0,1,0,1,0,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,
	1,0,1,1,1,0,1,0,0,0,1,0,0,1,0,1,0,1,1,1,0,1,1,1,1,1,1,0,1,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,0,1,0,1,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
};

int mapXt = 32, mapYt = 32, mapSt = 16; //mapX- number of elements on X axis, mapY- number of elements on Y axis, mapS-elements size (in this case the map is 512x512)
int mapTarget1[] = //bronze ribbon map level 1
{
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
};

int mapTarget2[] = //silver ribbon map level 2
{
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
};

int mapTarget3[] = //gold ribbon map level 3
{
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
};

void drawMap2D() {
	int x, y, xo, yo;
	for (y = 0; y < mapYw; y++)
	{
		for (x = 0; x < mapXw; x++)
		{
			if (mapWall[y * mapXw + x] == 1) {
				glColor3f(1, 1, 1);
			}
			else {
				glColor3f(0, 0, 0);
			}
			xo = x * mapSw;
			yo = y * mapSw;
			glBegin(GL_QUADS);
			glVertex2i(xo+1, yo+1);
			glVertex2i(xo+1, yo+mapSw-1);
			glVertex2i(xo + mapSw-1, yo + mapSw-1);
			glVertex2i(xo + mapSw-1, yo+1);
			glEnd();
		}
	}
}

float dist(float ax, float ay, float bx, float by, float ang)
{
	return(sqrt((bx - ax)* (bx - ax) + (by-ay)* (by - ay) ));
}


void drawRays3D() 
{
	int r, mxw, myw, mxt, myt, mpw, mpt, dof, mapTarget[1024], dcont;
	float rx, ry, ra, xo, yo, disTw=1000000, disTt=1000000;
	ra = pa - DR * 30; //rays angle is the players angles minus 30 degrees
	if (ra < 0)
	{
		ra += 2 * PI;
	}
	if (ra > 2 * PI)
	{
		ra -= 2 * PI;
	}
	if (lvl == 1)
	{
		for (int i = 0; i < 1024; i++)
		{
			mapTarget[i] = mapTarget1[i];
		}
		dcont = 0;
	}
	if (lvl == 2)
	{
		for (int k = 0; k < 1024; k++)
		{
			mapTarget[k] = mapTarget2[k];
		}
		dcont = 0;
	}
	if (lvl == 3)
	{
		for (int j = 0; j < 1024; j++)
		{
			mapTarget[j] = mapTarget3[j];
		}
		dcont = 0;
	}
	for (r = 0; r < 480; r++)
	{
		//check target horizontal lines
		
		dof = 0;
		float disHt= 1000000, hxt = py, hyt = py;
		float aTant = -1 / tan(ra);//tangent value
		if (ra > PI)//rays looking down
		{
			ry = (((int)py >> 4) << 4) - 0.0001;
			rx = (py - ry) * aTant + px;
			yo = -16;
			xo = -yo * aTant;
		}
		if (ra < PI)
		{
			ry = (((int)py >> 4) << 4) + 16;
			rx = (py - ry) * aTant + px;
			yo = 16;
			xo = -yo * aTant;
		}
		if (ra == 0 || ra == PI)
		{
			rx = px;
			ry = py;
			dof = 32;
		}
		while (dof < 32)
		{
			mxt = (int)(rx) >> 4;
			myt = (int)(ry) >> 4;
			mpt = myt * mapXt + mxt;
			if (mpt > 0 && mpt < mapXt * mapYt && mapTarget[mpt] == 1)
			{
				hxt = rx;
				hyt = ry;
				disHt = dist(px, py, hxt, hyt, ra);
				dof = 32;
			}
			else
			{
				rx += xo;
				ry += yo;
				dof += 1;
			}
		}
		//check walls horizontal lines
		dof = 0;
		float disHw = 1000000, hxw = px, hyw=py;
		float aTanw = -1 / tan(ra);//tangent value
		if (ra > PI)//rays looking down
		{
			ry = (((int) py >> 4) << 4) - 0.0001;
			rx = (py - ry) * aTanw + px;
			yo = -16;
			xo = -yo * aTanw;
		}
		if (ra < PI)
		{
			ry = (((int) py >> 4) << 4) + 16;
			rx = (py - ry) * aTanw + px;
			yo = 16;
			xo = -yo * aTanw;
		}
		if (ra == 0 || ra == PI)
		{
			rx = px;
			ry = py;
			dof = 32;
		}
		while (dof < 32)
		{
			mxw = (int) (rx) >> 4;
			myw = (int) (ry) >> 4;
			mpw = myw * mapXw + mxw;
			if (mpw > 0 && mpw < mapXw * mapYw && mapWall[mpw] == 1)
			{
				hxw = rx;
				hyw = ry;
				disHw = dist(px, py, hxw, hyw, ra);
				dof = 32;
				}
			else
			{
				rx += xo;
				ry += yo;
				dof += 1;
			}
		}
		
		
		//checking walls vertical lines
		dof = 0;
		float disVw = 1000000, vxw = px, vyw=py;
		float nTanw = -tan(ra);
		if (ra > P2 && ra<P3)
		{
			rx = (((int)px >> 4) << 4) - 0.0001;
			ry = (px - rx) * nTanw + py;
			xo = -16;
			yo = -xo * nTanw;
		}
		if (ra < P2 || ra>P3)
		{
			rx = (((int)px >> 4) << 4) + 16;
			ry = (px - rx) * nTanw + py;
			xo = 16;
			yo = -xo * nTanw;
		}
		if (ra == 0 || ra == PI)
		{
			rx = px;
			ry = py;
			dof = 32;
		}
		while (dof < 32)
		{
			mxw = (int)(rx) >> 4;
			myw = (int)(ry) >> 4;
			mpw = myw * mapXw + mxw;
			if (mpw > 0 && mpw < mapXw * mapYw && mapWall[mpw] == 1)
			{
				vxw = rx;
				vyw = ry;
				disVw = dist(px, py, vxw, vyw, ra);
				dof = 32;
			}
			else
			{
				rx += xo;
				ry += yo;
				dof += 1;
			}
		}

		//checking target vertical lines
		dof = 0;
		float disVt = 1000000, vxt = px, vyt = py;
		float nTant = -tan(ra);
		if (ra > P2 && ra < P3)
		{
			rx = (((int)px >> 4) << 4) - 0.0001;
			ry = (px - rx) * nTant + py;
			xo = -16;
			yo = -xo * nTant;
		}
		if (ra < P2 || ra>P3)
		{
			rx = (((int)px >> 4) << 4) + 16;
			ry = (px - rx) * nTant + py;
			xo = 16;
			yo = -xo * nTant;
		}
		if (ra == 0 || ra == PI)
		{
			rx = px;
			ry = py;
			dof = 32;
		}
		while (dof < 32)
		{
			mxt = (int)(rx) >> 4;
			myt = (int)(ry) >> 4;
			mpt = myt * mapXt + mxt;
			if (mpt > 0 && mpt < mapXt * mapYt && mapTarget[mpt] == 1)
			{
				vxt = rx;
				vyt = ry;
				disVt = dist(px, py, vxt, vyt, ra);
				dof = 32;
			}
			else
			{
				rx += xo;
				ry += yo;
				dof += 1;
			}
		}
		
		float lineH;
		float ca = pa - ra;
		if (ca < 0)	{	ca += 2 * PI;}
		if (ca > 2 * PI){	ca -= 2 * PI;}

		if (disVt <= disHt && disVt <= disVw && disVt <= disHw)
		{
			rx = vxt;
			ry = vyt;
			disTt = disVt * cos(ca);
			disTw = 100000;
			if (lvl == 1){	glColor3f(0.8039, 0.498, 0.1961);}
			if (lvl == 2){	glColor3f(0.7529, 0.7529, 0.7529);}
			if (lvl == 3){	glColor3f(0.8549, 0.6471, 0.1255);}
			lineH = (mapSt * 200) / disTt;
		}
		if (disHt < disVt && disHt <= disHw && disHt <= disVw)
		{
			rx = hxt;
			ry = hyt;
			disTt = disHt* cos(ca);
			disTw = 100000;
			if (lvl == 1){	glColor3f(0.8039, 0.498, 0.1961);}
			if (lvl == 2){	glColor3f(0.7529, 0.7529, 0.7529);}
			if (lvl == 3){	glColor3f(0.8549, 0.6471, 0.1255);}
			lineH = (mapSt * 200) / disTt;
		}
		if (disVw <= disHw && disVw < disVt && disVw < disHt)
		{
			rx = vxw;
			ry = vyw;
			disTw = disVw* cos(ca);
			disTt = 100000;
			if (lvl == 1){	glColor3f(0.7451, 0.902, 0.9373);}
			if (lvl == 2){	glColor3f(0.898, 0.902, 0.6039);}
			if (lvl == 3){	glColor3f(0.898, 0.6353, 0.5882);}
			lineH = (mapSw * 420) / disTw;
		}
		if (disHw < disVw && disHw < disHt && disHw < disVt)
		{
			rx = hxw;
			ry = hyw;
			disTw = disHw * cos(ca);
			disTt = 100000;
			if (lvl == 1){	glColor3f(0.4545, 0.80, 0.8706);}
			if (lvl == 2){	glColor3f(0.8353, 0.8431, 0.3608);}
			if (lvl == 3){	glColor3f(0.8392, 0.4235, 0.349);}
			lineH = (mapSw * 420) / disTw;
		}
		//draw rays
		/*glLineWidth(1);
		glBegin(GL_LINES);
		glVertex2i(px, py);
		glVertex2i(rx, ry);
		glEnd();*/

		//------DRAW 3D Walls--------
		
		if (lineH > 420){lineH = 420;}
		float lineO = 260 - lineH / 2;
		
		glLineWidth(8);
		glBegin(GL_LINES);
		glVertex2i(r*2 + 562, lineO);
		glVertex2i(r*2 + 562, lineH+lineO);
		glEnd();
		if (r>=79 && r<=399)
		{
			if (disTt<=disTw)
			{
				front_dis = disTt;
				if (disTt < 3 && dcont==0){lvl = lvl + 1;	dcont = 1;}
			}
			else{front_dis = disTw;}
		}
		ra += 0.125*DR;
		if (ra < 0){ra += 2 * PI;}
		if (ra > 2 * PI){ra -= 2 * PI;}
	}
}


void display() {
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	drawMap2D();
	drawPlayer();
	drawRays3D();
	glutSwapBuffers();
	if (lvl == 4)
	{
		MessageBox(NULL, L"Congrats, you won!", L"THIS IS A MAZE GAME", 0);
		lvl=0;
		fmes = 0;
		px = 244;
		py = 244;
	}
	if (lvl == 0 && fmes == 0)
	{
		MessageBox(NULL, L"You must find and touch the three prizes hidden in the maze: \nBronze Ribbon - Level 1\nSilver Ribbon - Level 2\nGold Ribbon - Level 3\nCommands:\nW - Foward\nA - Rotate Left\nD - Rotate Right\nEach level will be harder.\nGOOD LUCK!", L"THIS IS A MAZE GAME", 0);
		fmes = 1;
		lvl = 1;
	}
}

void buttons(unsigned char key, int x, int y)
{
	if (key == 'a') {
		pa -= 0.1;
		if (pa < 0){pa += 2 * PI;		}
		pdx = cos(pa) * 3;//multiply by a constant = turning faster or slower
		pdy = sin(pa) * 3;
	}
	if (key == 'd') {
		pa += 0.1;
		if (pa > 2*PI){pa -= 2 * PI;}
		pdx = cos(pa) * 3;
		pdy = sin(pa) * 3;
	}
	if (key == 'w' && front_dis > 3) {
		px += pdx;
		py += pdy;
	}
	glutPostRedisplay();
}

void init() {
	glClearColor(0.3f,0.3f,0.3f,0);
	glOrtho(0, 1536, 512, 0, -1, 1);
	px = 244;
	py = 244;
	pdx = cos(pa) * 5;
	pdy = sin(pa) * 5;
}

int main (int argc, char **argv) {
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
	glutInitWindowSize(1024, 512);
	glutCreateWindow("THIS IS A MAZE GAME");
	
	//glutReshapeFunc(reshape);
	init();
	glutDisplayFunc(display);
	glutKeyboardFunc(buttons);
	glutMainLoop();
	return 0;
}